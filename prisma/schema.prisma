generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  isAdmin   Boolean? @default(false)
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

enum Role {
  ADMIN
  USER
}

model Product {
  id            Int             @id @default(autoincrement())
  name          String
  sku           String          @unique
  expiration    DateTime
  categoryId    Int             @default(1)
  price         Float
  quantity      Int
  supplierId    Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  category      Category        @relation(fields: [categoryId], references: [id])
  supplier      Supplier        @relation(fields: [supplierId], references: [id])
  StockMovement StockMovement[]
  orderItems    OrderItem[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Supplier {
  id          Int       @id @default(autoincrement())
  name        String
  contactInfo String
  email       String
  phone       String
  address     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model StockMovement {
  id              Int      @id @default(autoincrement())
  productId       Int
  quantityChanged Int
  type            String
  date            DateTime @default(now())
  product         Product  @relation(fields: [productId], references: [id])
}

model Order {
  id              Int         @id @default(autoincrement())
  userId          Int
  customerName    String
  orderDate       DateTime    @default(now())
  totalAmount     Float
  status          OrderStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  shippedAt       DateTime?
  shippingAddress String
  billingAddress  String
  user            User        @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}
